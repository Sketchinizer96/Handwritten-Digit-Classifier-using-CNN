# splunk_llm_agent.py

import json
import re
import requests
from functools import lru_cache

# ========== Config ==========
with open("app_host_mapping.json") as f:
    APP_HOST_MAPPING = json.load(f)

SPLUNK_USERNAME = "your_splunk_username"
SPLUNK_PASSWORD = "your_splunk_password"
CUSTOM_LLM_API_URL = "https://your.custom.llm/api/generate"
CUSTOM_LLM_API_TOKEN = "your_llm_token"

# ========== Cache ==========
@lru_cache(maxsize=100)
def cache_result(key, value):
    return value

# ========== App ID Extraction ==========
def extract_app_id(question):
    match = re.search(r"\b\d{4,}\b", question)
    return match.group() if match else None

# ========== Query Generator ==========
def generate_splunk_query(user_question):
    headers = {
        "Authorization": f"Bearer {CUSTOM_LLM_API_TOKEN}",
        "Content-Type": "application/json"
    }

    payload = {
        "llm_service": "gpt4",
        "question": user_question,
        "few_shot": "",
        "prompt": "Generate a Splunk query using the index parameter.",
        "user_given_context": "Splunk query assistant",
        "output_type": "json_object"
    }

    try:
        response = requests.post(CUSTOM_LLM_API_URL, json=payload, headers=headers)
        response.raise_for_status()
        return response.json().get("query")
    except Exception as e:
        print(f"LLM Query Generation Failed: {e}")
        return None

# ========== Splunk Client ==========
def search_splunk(query, hosts):
    for host in hosts:
        url = f"https://{host}/services/search/jobs"
        data = {"search": query, "output_mode": "json"}

        try:
            response = requests.post(url, auth=(SPLUNK_USERNAME, SPLUNK_PASSWORD), data=data, verify=False)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"Splunk query failed on host {host}: {e}")
            continue
    return None

# ========== Result Summarizer ==========
def summarize_results(results):
    headers = {
        "Authorization": f"Bearer {CUSTOM_LLM_API_TOKEN}",
        "Content-Type": "application/json"
    }

    payload = {
        "llm_service": "gpt4",
        "question": f"Summarize the following Splunk logs:\n{results}",
        "few_shot": "",
        "prompt": "Summarize the Splunk logs.",
        "user_given_context": "Splunk summarizer",
        "output_type": "text"
    }

    try:
        response = requests.post(CUSTOM_LLM_API_URL, json=payload, headers=headers)
        response.raise_for_status()
        return response.json().get("summary")
    except Exception as e:
        print(f"LLM Summary Failed: {e}")
        return None

# ========== Agent ==========
def run_agent(user_question):
    app_id = extract_app_id(user_question)
    if not app_id:
        return "No application ID found in your question."

    hosts = APP_HOST_MAPPING.get(app_id)
    if not hosts:
        return f"No Splunk hosts configured for application ID {app_id}."

    cached = cache_result(user_question, None)
    if cached:
        return f"(Cached) {cached}"

    query = generate_splunk_query(user_question)
    if not query:
        return "Failed to generate query."

    results = search_splunk(query, hosts)
    if not results:
        return "Failed to retrieve results from Splunk."

    summary = summarize_results(results)
    if summary:
        cache_result(user_question, summary)
    return summary or "Could not summarize results."

# ========== Main ==========
def main():
    print("Welcome to the Splunk LLM Agent!")
    while True:
        user_input = input("Ask a question (or type 'exit'): ")
        if user_input.lower() in ["exit", "quit"]:
            break
        answer = run_agent(user_input)
        print(f"\nAnswer:\n{answer}\n")

if __name__ == "__main__":
    main()