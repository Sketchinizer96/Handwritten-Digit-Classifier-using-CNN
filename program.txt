import xlwings as xw
import requests
import time
import base64
import concurrent.futures
import os
import mimetypes

# Replace with actual credentials
username = 'admin'
password = 'your_password'

# Encode the credentials for basic authentication
credentials = f"{username}:{password}"
encoded_credentials = base64.b64encode(credentials.encode()).decode()

# File path input
file_path = input("Please enter excel path: ")
wb = xw.Book(file_path)
sheet = wb.sheets[0]

# Find the last row with data in column A
last_row = sheet.range('A' + str(sheet.cells.last_cell.row)).end('up').row
ids = sheet.range(f"A2:A{last_row}").value
file_names = sheet.range(f"B2:B{last_row}").value  # Column B contains file names
folders = sheet.range(f"C2:C{last_row}").value     # Column C contains folder names

# Function to download any file type
def download_file(id_value, file_name, folder_name):
    url = f"http://your_api_endpoint/{id_value}"
    headers = {
        'Authorization': f'Basic {encoded_credentials}',
    }
    
    # Ensure the folder exists
    save_folder = os.path.join(folder_name)
    os.makedirs(save_folder, exist_ok=True)
    
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            # Determine file extension from content-type
            content_type = response.headers.get('Content-Type', '')
            extension = mimetypes.guess_extension(content_type.split(";")[0])
            if not extension:
                extension = ".bin"  # Fallback to binary if unknown

            # Save the file
            file_path = os.path.join(save_folder, f"{file_name}{extension}")
            with open(file_path, 'wb') as f:
                f.write(response.content)
            return id_value, "Success"
        else:
            return id_value, f"Failed with status code {response.status_code}"
    except Exception as e:
        return id_value, f"Error: {e}"

# Collect all the download results using ThreadPoolExecutor
results = []
with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
    futures = {executor.submit(download_file, id_value, file_name, folder): i 
               for i, (id_value, file_name, folder) in enumerate(zip(ids, file_names, folders), start=2)}
    for future in concurrent.futures.as_completed(futures):
        id_value, status = future.result()
        results.append((id_value, status))

# Now write the results to Excel (main thread)
for row, (id_value, status) in enumerate(results, start=2):
    sheet.range(f'D{row}').value = status  # Write the status in column D
    print(f"Processed ID {id_value} - Status: {status}")

# Save the workbook after processing
wb.save(file_path)

print("Process completed.")