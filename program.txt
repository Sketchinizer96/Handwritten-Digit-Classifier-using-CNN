def get_command():
    print("Welcome to the CF Command Helper!")
    while True:
        print("\nSelect a topic:")
        print("1. API and Authentication")
        print("2. Applications")
        print("3. Services")
        print("4. Routes")
        print("5. Organizations and Spaces")
        print("6. Users")
        print("7. Quit")

        choice = input("Enter the number of the topic: ")

        if choice == '1':
            api_and_authentication()
        elif choice == '2':
            applications()
        elif choice == '3':
            services()
        elif choice == '4':
            routes()
        elif choice == '5':
            organizations_and_spaces()
        elif choice == '6':
            users()
        elif choice == '7':
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

def api_and_authentication():
    print("\nAPI and Authentication Commands:")
    print("1. Set or view the target API endpoint")
    print("2. Authenticate non-interactively")
    print("3. Log in to a Cloud Foundry instance")
    print("4. Log out of a Cloud Foundry instance")
    choice = input("Enter the number of the command: ")

    if choice == '1':
        url = input("Enter the API endpoint URL: ")
        skip_ssl = input("Skip SSL validation? (yes/no): ")
        command = f"cf api {url}"
        if skip_ssl.lower() == 'yes':
            command += " --skip-ssl-validation"
        print(f"Generated command: {command}")
    elif choice == '2':
        username = input("Enter your username: ")
        password = input("Enter your password: ")
        print(f"Generated command: cf auth {username} {password}")
    elif choice == '3':
        api_url = input("Enter the API URL (or leave blank to use the current): ")
        username = input("Enter your username: ")
        password = input("Enter your password: ")
        sso = input("Use SSO? (yes/no): ")
        sso_passcode = input("Enter SSO passcode (if using SSO): ") if sso.lower() == 'yes' else ''
        command = "cf login"
        if api_url:
            command += f" -a {api_url}"
        if username:
            command += f" -u {username}"
        if password:
            command += f" -p {password}"
        if sso.lower() == 'yes':
            command += " --sso"
            if sso_passcode:
                command += f" --sso-passcode {sso_passcode}"
        print(f"Generated command: {command}")
    elif choice == '4':
        print("Generated command: cf logout")
    else:
        print("Invalid choice. Please try again.")

def applications():
    print("\nApplication Commands:")
    print("1. Push an app")
    print("2. List all apps")
    print("3. Display health and status for an app")
    print("4. Start an app")
    print("5. Stop an app")
    print("6. Restart an app")
    print("7. Restage an app")
    print("8. Delete an app")
    print("9. Scale an app")
    print("10. View logs for an app")
    print("11. Show environment variables for an app")
    print("12. Set an environment variable for an app")
    print("13. Remove an environment variable from an app")
    choice = input("Enter the number of the command: ")

    if choice == '1':
        app_name = input("Enter the app name: ")
        buildpack = input("Enter the buildpack name (or leave blank): ")
        command = input("Enter the command to run (or leave blank): ")
        domain = input("Enter the domain (or leave blank): ")
        manifest_path = input("Enter the manifest path (or leave blank): ")
        no_start = input("Do not start the app after pushing? (yes/no): ")
        cmd = f"cf push {app_name}"
        if buildpack:
            cmd += f" -b {buildpack}"
        if command:
            cmd += f" -c '{command}'"
        if domain:
            cmd += f" -d {domain}"
        if manifest_path:
            cmd += f" -f {manifest_path}"
        if no_start.lower() == 'yes':
            cmd += " --no-start"
        print(f"Generated command: {cmd}")
    elif choice == '2':
        print("Generated command: cf apps")
    elif choice == '3':
        app_name = input("Enter the app name: ")
        print(f"Generated command: cf app {app_name}")
    elif choice == '4':
        app_name = input("Enter the app name: ")
        print(f"Generated command: cf start {app_name}")
    elif choice == '5':
        app_name = input("Enter the app name: ")
        print(f"Generated command: cf stop {app_name}")
    elif choice == '6':
        app_name = input("Enter the app name: ")
        print(f"Generated command: cf restart {app_name}")
    elif choice == '7':
        app_name = input("Enter the app name: ")
        print(f"Generated command: cf restage {app_name}")
    elif choice == '8':
        app_name = input("Enter the app name: ")
        force = input("Force delete? (yes/no): ")
        cmd = f"cf delete {app_name}"
        if force.lower() == 'yes':
            cmd += " -f"
        print(f"Generated command: {cmd}")
    elif choice == '9':
        app_name = input("Enter the app name: ")
        instances = input("Enter the number of instances (or leave blank): ")
        memory = input("Enter the memory limit (e.g., 256M) (or leave blank): ")
        disk = input("Enter the disk limit (e.g., 1G) (or leave blank): ")
        cmd = f"cf scale {app_name}"
        if instances:
            cmd += f" -i {instances}"
        if memory:
            cmd += f" -m {memory}"
        if disk:
            cmd += f" -k {disk}"
        print(f"Generated command: {cmd}")
    elif choice == '10':
        app_name = input("Enter the app name: ")
        recent = input("Show recent logs only? (yes/no): ")
        cmd = f"cf logs {app_name}"
        if recent.lower() == 'yes':
            cmd += " --recent"
        print(f"Generated command: {cmd}")
    elif choice == '11':
        app_name = input("Enter the app name: ")
        print(f"Generated command: cf env {app_name}")
    elif choice == '12':
        app_name = input("Enter the app name: ")
        env_var = input("Enter the environment variable name: ")
        value = input("Enter the value: ")
        print(f"Generated command: cf set-env {app_name} {env_var} {value}")
    elif choice == '13':
        app_name = input("Enter the app name: ")
        env_var = input("Enter the environment variable name: ")
        print(f"Generated command: cf unset-env {app_name} {env_var}")
    else:
        print("Invalid choice. Please try again.")

def services():
    print("\nService Commands:")
    print("1. List all service instances")
    print("2. Create a service instance")
    print("3. Bind a service instance to an app")
    print("4. Unbind a service instance from an app")
    print("5. Delete a service instance")
    print("6. Show info for a service instance")
    choice = input("Enter the number of the command: ")

    if choice == '1':
        print("Generated command: cf services")
    elif choice == '2':
        service = input("Enter the service: ")
        plan = input("Enter the plan: ")
        service_instance = input("Enter the service instance name: ")
        params = input("Enter parameters as JSON (or leave blank): ")
        tags = input("Enter tags (comma-separated, or leave blank): ")
        cmd = f"cf create-service {service} {plan} {service_instance}"
        if params:
            cmd += f" -c '{params}'"
        if tags:
            cmd += f" -t '{tags}'"
        print(f"Generated command: {cmd}")
    elif choice == '3':
        app_name = input("Enter the app name: ")
        service_instance = input("Enter the service instance name: ")
        params = input("Enter parameters as JSON (or leave blank): ")
        cmd = f"cf bind-service {app_name} {service_instance}"
        if params:
            cmd += f" -c '{params}'"
        print(f"Generated command: {cmd}")
    elif choice == '4':
        app_name = input("Enter the app name: ")
        service_instance = input("Enter the service instance name: ")
        print(f"Generated command: cf unbind-service {app_name} {service_instance}")
    elif choice == '5':
        service_instance = input("Enter the service instance name: ")
        force = input("Force delete? (yes/no): ")
        cmd = f"cf delete-service {service_instance}"
        if force.lower() == 'yes':
            cmd += " -f"
        print(f"Generated command: {cmd}")
    elif choice == '6':
        service_instance = input("Enter the service instance name: ")
        print(f"Generated command: cf service {service_instance}")
    else:
        print("Invalid choice. Please try again.")

def routes():
    print("\nRoute Commands:")
    print("1. List all routes")
    print("2. Create a route")
    print("3. Delete a route")
    print("4. Map a route to an app")
    print("5. Unmap a route from an app")
    choice = input("Enter the number of the command: ")

    if choice == '1':
        print("Generated command: cf routes")
    elif choice == '2':
        space = input("Enter the space: ")
        domain = input("Enter the domain: ")
        hostname = input("Enter the hostname (or leave blank): ")
        path = input("Enter the path (or leave blank): ")
        cmd = f"cf create-route {space} {domain}"
        if hostname:
            cmd += f" --hostname {hostname}"
        if path:
            cmd += f" --path {path}"
        print(f"Generated command: {cmd}")
    elif choice == '3':
        domain = input("Enter the domain: ")
        hostname = input("Enter the hostname (or leave blank): ")
        path = input("Enter the path (or leave blank): ")
        force = input("Force delete? (yes/no): ")
        cmd = f"cf delete-route {domain}"
        if hostname:
            cmd += f" --hostname {hostname}"
        if path:
            cmd += f" --path {path}"
        if force.lower() == 'yes':
            cmd += " -f"
        print(f"Generated command: {cmd}")
    elif choice == '4':
        app_name = input("Enter the app name: ")
        domain = input("Enter the domain: ")
        hostname = input("Enter the hostname (or leave blank): ")
        path = input("Enter the path (or leave blank): ")
        cmd = f"cf map-route {app_name} {domain}"
        if hostname:
            cmd += f" --hostname {hostname}"
        if path:
            cmd += f" --path {path}"
        print(f"Generated command: {cmd}")
    elif choice == '5':
        app_name = input("Enter the app name: ")
        domain = input("Enter the domain: ")
        hostname = input("Enter the hostname (or leave blank): ")
        path = input("Enter the path (or leave blank): ")
        cmd = f"cf unmap-route {app_name} {domain}"
        if hostname:
            cmd += f" --hostname {hostname}"
        if path:
            cmd += f" --path {path}"
        print(f"Generated command: {cmd}")
    else:
        print("Invalid choice. Please try again.")

def organizations_and_spaces():
    print("\nOrganizations and Spaces Commands:")
    print("1. List all organizations")
    print("2. Create an organization")
    print("3. Delete an organization")
    print("4. List all spaces")
    print("5. Create a space")
    print("6. Delete a space")
    print("7. Set or view the target organization and space")
    choice = input("Enter the number of the command: ")

    if choice == '1':
        print("Generated command: cf orgs")
    elif choice == '2':
        org_name = input("Enter the organization name: ")
        print(f"Generated command: cf create-org {org_name}")
    elif choice == '3':
        org_name = input("Enter the organization name: ")
        force = input("Force delete? (yes/no): ")
        cmd = f"cf delete-org {org_name}"
        if force.lower() == 'yes':
            cmd += " -f"
        print(f"Generated command: {cmd}")
    elif choice == '4':
        print("Generated command: cf spaces")
    elif choice == '5':
        space_name = input("Enter the space name: ")
        org_name = input("Enter the organization name (or leave blank): ")
        cmd = f"cf create-space {space_name}"
        if org_name:
            cmd += f" -o {org_name}"
        print(f"Generated command: {cmd}")
    elif choice == '6':
        space_name = input("Enter the space name: ")
        force = input("Force delete? (yes/no): ")
        cmd = f"cf delete-space {space_name}"
        if force.lower() == 'yes':
            cmd += " -f"
        print(f"Generated command: {cmd}")
    elif choice == '7':
        org_name = input("Enter the organization name: ")
        space_name = input("Enter the space name: ")
        cmd = "cf target"
        if org_name:
            cmd += f" -o {org_name}"
        if space_name:
            cmd += f" -s {space_name}"
        print(f"Generated command: {cmd}")
    else:
        print("Invalid choice. Please try again.")

def users():
    print("\nUser Commands:")
    print("1. Create a new user")
    print("2. Delete a user")
    print("3. List users in an organization")
    print("4. List users in a space")
    print("5. Assign an organization role to a user")
    print("6. Remove an organization role from a user")
    print("7. Assign a space role to a user")
    print("8. Remove a space role from a user")
    choice = input("Enter the number of the command: ")

    if choice == '1':
        username = input("Enter the username: ")
        password = input("Enter the password: ")
        print(f"Generated command: cf create-user {username} {password}")
    elif choice == '2':
        username = input("Enter the username: ")
        force = input("Force delete? (yes/no): ")
        cmd = f"cf delete-user {username}"
        if force.lower() == 'yes':
            cmd += " -f"
        print(f"Generated command: {cmd}")
    elif choice == '3':
        org_name = input("Enter the organization name: ")
        print(f"Generated command: cf org-users {org_name}")
    elif choice == '4':
        org_name = input("Enter the organization name: ")
        space_name = input("Enter the space name: ")
        print(f"Generated command: cf space-users {org_name} {space_name}")
    elif choice == '5':
        username = input("Enter the username: ")
        org_name = input("Enter the organization name: ")
        role = input("Enter the role: ")
        print(f"Generated command: cf set-org-role {username} {org_name} {role}")
    elif choice == '6':
        username = input("Enter the username: ")
        org_name = input("Enter the organization name: ")
        role = input("Enter the role: ")
        print(f"Generated command: cf unset-org-role {username} {org_name} {role}")
    elif choice == '7':
        username = input("Enter the username: ")
        org_name = input("Enter the organization name: ")
        space_name = input("Enter the space name: ")
        role = input("Enter the role: ")
        print(f"Generated command: cf set-space-role {username} {org_name} {space_name} {role}")
    elif choice == '8':
        username = input("Enter the username: ")
        org_name = input("Enter the organization name: ")
        space_name = input("Enter the space name: ")
        role = input("Enter the role: ")
        print(f"Generated command: cf unset-space-role {username} {org_name} {space_name} {role}")
    else:
        print("Invalid choice. Please try again.")

if __name__ == "__main__":
    get_command()


Topic,Command,Description,Options,Generated Command Example
API and Authentication,Set or view the target API endpoint,Set or view the target API endpoint,URL, Skip SSL Validation,cf api <URL> --skip-ssl-validation
API and Authentication,Authenticate non-interactively,Authenticate non-interactively,Username, Password,cf auth <username> <password>
API and Authentication,Log in to a Cloud Foundry instance,Log in to a Cloud Foundry instance,API URL, Username, Password, SSO, SSO Passcode,cf login -a <API_URL> -u <username> -p <password> --sso --sso-passcode <passcode>
API and Authentication,Log out of a Cloud Foundry instance,Log out of a Cloud Foundry instance,None,cf logout
Applications,Push an app,Push an app,App Name, Buildpack, Command, Domain, Manifest Path, No Start,cf push <app_name> -b <buildpack> -c '<command>' -d <domain> -f <manifest_path> --no-start
Applications,List all apps,List all apps,None,cf apps
Applications,Display health and status for an app,Display health and status for an app,App Name,cf app <app_name>
Applications,Start an app,Start an app,App Name,cf start <app_name>
Applications,Stop an app,Stop an app,App Name,cf stop <app_name>
Applications,Restart an app,Restart an app,App Name,cf restart <app_name>
Applications,Restage an app,Restage an app,App Name,cf restage <app_name>
Applications,Delete an app,Delete an app,App Name, Force Delete,cf delete <app_name> -f
Applications,Scale an app,Scale an app,App Name, Instances, Memory, Disk,cf scale <app_name> -i <instances> -m <memory> -k <disk>
Applications,View logs for an app,View logs for an app,App Name, Recent,cf logs <app_name> --recent
Applications,Show environment variables for an app,Show environment variables for an app,App Name,cf env <app_name>
Applications,Set an environment variable for an app,Set an environment variable for an app,App Name, Environment Variable, Value,cf set-env <app_name> <env_var> <value>
Applications,Remove an environment variable from an app,Remove an environment variable from an app,App Name, Environment Variable,cf unset-env <app_name> <env_var>
Services,List all service instances,List all service instances,None,cf services
Services,Create a service instance,Create a service instance,Service, Plan, Service Instance, Parameters, Tags,cf create-service <service> <plan> <service_instance> -c '<params>' -t '<tags>'
Services,Bind a service instance to an app,Bind a service instance to an app,App Name, Service Instance, Parameters,cf bind-service <app_name> <service_instance> -c '<params>'
Services,Unbind a service instance from an app,Unbind a service instance from an app,App Name, Service Instance,cf unbind-service <app_name> <service_instance>
Services,Delete a service instance,Delete a service instance,Service Instance, Force Delete,cf delete-service <service_instance> -f
Services,Show info for a service instance,Show info for a service instance,Service Instance,cf service <service_instance>
Routes,List all routes,List all routes,None,cf routes
Routes,Create a route,Create a route,Space, Domain, Hostname, Path,cf create-route <space> <domain> --hostname <hostname> --path <path>
Routes,Delete a route,Delete a route,Domain, Hostname, Path, Force Delete,cf delete-route <domain> --hostname <hostname> --path <path> -f
Routes,Map a route to an app,Map a route to an app,App Name, Domain, Hostname, Path,cf map-route <app_name> <domain> --hostname <hostname> --path <path>
Routes,Unmap a route from an app,Unmap a route from an app,App Name, Domain, Hostname, Path,cf unmap-route <app_name> <domain> --hostname <hostname> --path <path>
Organizations and Spaces,List all organizations,List all organizations,None,cf orgs
Organizations and Spaces,Create an organization,Create an organization,Organization Name,cf create-org <org_name>
Organizations and Spaces,Delete an organization,Delete an organization,Organization Name, Force Delete,cf delete-org <org_name> -f
Organizations and Spaces,List all spaces,List all spaces,None,cf spaces
Organizations and Spaces,Create a space,Create a space,Space Name, Organization Name,cf create-space <space_name> -o <org_name>
Organizations and Spaces,Delete a space,Delete a space,Space Name, Force Delete,cf delete-space <space_name> -f
Organizations and Spaces,Set or view the target organization and space,Set or view the target organization and space,Organization Name, Space Name,cf target -o <org_name> -s <space_name>
Users,Create a new user,Create a new user,Username, Password,cf create-user <username> <password>
Users,Delete a user,Delete a user,Username, Force Delete,cf delete-user <username> -f
Users,List users in an organization,List users in an organization,Organization Name,cf org-users <org_name>
Users,List users in a space,List users in a space,Organization Name, Space Name,cf space-users <org_name> <space_name>
Users,Assign an organization role to a user,Assign an organization role to a user,Username, Organization Name, Role,cf set-org-role <username> <org_name> <role>
Users,Remove an organization role from a user,Remove an organization role from a user,Username, Organization Name, Role,cf unset-org-role <username> <org_name> <role>
Users,Assign a space role to a user,Assign a space role to a user,Username, Organization Name, Space Name, Role,cf set-space-role <username> <org_name> <space_name> <role>
Users,Remove a space role from a user,Remove a space role from a user,Username, Organization Name, Space Name, Role,cf unset-space-role <username> <org_name> <space_name> <role>